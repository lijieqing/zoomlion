package com.kstech.zoomlion.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kstech.zoomlion.model.db.MsgSetDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_msg".
*/
public class MsgSetDBDao extends AbstractDao<MsgSetDB, Long> {

    public static final String TABLENAME = "tb_msg";

    /**
     * Properties of entity MsgSetDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgID = new Property(1, Integer.class, "msgID", false, "MSG_ID");
        public final static Property RefName = new Property(2, String.class, "refName", false, "REF_NAME");
        public final static Property Content = new Property(3, String.class, "Content", false, "CONTENT");
    }


    public MsgSetDBDao(DaoConfig config) {
        super(config);
    }
    
    public MsgSetDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_msg\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MSG_ID\" INTEGER UNIQUE ," + // 1: msgID
                "\"REF_NAME\" TEXT UNIQUE ," + // 2: refName
                "\"CONTENT\" TEXT);"); // 3: Content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_msg\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgSetDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer msgID = entity.getMsgID();
        if (msgID != null) {
            stmt.bindLong(2, msgID);
        }
 
        String refName = entity.getRefName();
        if (refName != null) {
            stmt.bindString(3, refName);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgSetDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer msgID = entity.getMsgID();
        if (msgID != null) {
            stmt.bindLong(2, msgID);
        }
 
        String refName = entity.getRefName();
        if (refName != null) {
            stmt.bindString(3, refName);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(4, Content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgSetDB readEntity(Cursor cursor, int offset) {
        MsgSetDB entity = new MsgSetDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // msgID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // refName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgSetDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRefName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgSetDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgSetDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgSetDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
