package com.kstech.zoomlion.model.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kstech.zoomlion.model.db.ParamInitData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARAM_INIT_DATA".
*/
public class ParamInitDataDao extends AbstractDao<ParamInitData, Long> {

    public static final String TABLENAME = "PARAM_INIT_DATA";

    /**
     * Properties of entity ParamInitData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property QcID = new Property(2, String.class, "qcID", false, "QC_ID");
        public final static Property OldValue = new Property(3, String.class, "oldValue", false, "OLD_VALUE");
        public final static Property NewValue = new Property(4, String.class, "newValue", false, "NEW_VALUE");
        public final static Property ParamUnit = new Property(5, String.class, "paramUnit", false, "PARAM_UNIT");
        public final static Property IsUpload = new Property(6, Boolean.class, "isUpload", false, "IS_UPLOAD");
    }


    public ParamInitDataDao(DaoConfig config) {
        super(config);
    }
    
    public ParamInitDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARAM_INIT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"NAME\" TEXT UNIQUE ," + // 1: name
                "\"QC_ID\" TEXT," + // 2: qcID
                "\"OLD_VALUE\" TEXT," + // 3: oldValue
                "\"NEW_VALUE\" TEXT," + // 4: newValue
                "\"PARAM_UNIT\" TEXT," + // 5: paramUnit
                "\"IS_UPLOAD\" INTEGER);"); // 6: isUpload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARAM_INIT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParamInitData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String qcID = entity.getQcID();
        if (qcID != null) {
            stmt.bindString(3, qcID);
        }
 
        String oldValue = entity.getOldValue();
        if (oldValue != null) {
            stmt.bindString(4, oldValue);
        }
 
        String newValue = entity.getNewValue();
        if (newValue != null) {
            stmt.bindString(5, newValue);
        }
 
        String paramUnit = entity.getParamUnit();
        if (paramUnit != null) {
            stmt.bindString(6, paramUnit);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(7, isUpload ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParamInitData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String qcID = entity.getQcID();
        if (qcID != null) {
            stmt.bindString(3, qcID);
        }
 
        String oldValue = entity.getOldValue();
        if (oldValue != null) {
            stmt.bindString(4, oldValue);
        }
 
        String newValue = entity.getNewValue();
        if (newValue != null) {
            stmt.bindString(5, newValue);
        }
 
        String paramUnit = entity.getParamUnit();
        if (paramUnit != null) {
            stmt.bindString(6, paramUnit);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(7, isUpload ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ParamInitData readEntity(Cursor cursor, int offset) {
        ParamInitData entity = new ParamInitData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // qcID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oldValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // newValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // paramUnit
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isUpload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParamInitData entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQcID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOldValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNewValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setParamUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsUpload(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ParamInitData entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ParamInitData entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParamInitData entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
